services:
  postgres:
    image: 'postgres:latest'
    container_name: 'postgres-db'
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5433:5432'
    healthcheck:
      test: "pg_isready -: 5sd clinic_db -U clinic"
      interval
      timeout: 2s
      retries: 5
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
      - './database_init/:/docker-entrypoint-initdb.d'

  kafka1:
    image: 'bitnami/kafka:latest'
    ports:
      - "9093:9093" # Порт для клиентов (PLAINTEXT).
      - "9094:9094" # Порт для взаимодействия контроллеров (CONTROLLER).
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9093,CONTROLLER://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9094,2@kafka2:9096,3@kafka3:9098
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_NUM_PARTITIONS=3  # Устанавливаем количество партиций
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3  # Устанавливаем фактор репликации
    depends_on:
      eureka:
        condition: service_healthy

  kafka2:
    image: 'bitnami/kafka:latest'
    ports:
      - "9095:9095" # Порт для клиентов (PLAINTEXT).
      - "9096:9096" # Порт для взаимодействия контроллеров (CONTROLLER).
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9095,CONTROLLER://:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9094,2@kafka2:9096,3@kafka3:9098
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_NUM_PARTITIONS=3  # Устанавливаем количество партиций
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3  # Устанавливаем фактор репликации
    depends_on:
      eureka:
        condition: service_healthy

  kafka3:
    image: 'bitnami/kafka:latest'
    ports:
      - "9097:9097" # Порт для клиентов (PLAINTEXT).
      - "9098:9098" # Порт для взаимодействия контроллеров (CONTROLLER).
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9097,CONTROLLER://:9098
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9094,2@kafka2:9096,3@kafka3:9098
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_NUM_PARTITIONS=3  # Устанавливаем количество партиций
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3  # Устанавливаем фактор репликации
    depends_on:
      eureka:
        condition: service_healthy


  eureka:
    build: ./eureka
    ports:
      - '8761:8761'
    healthcheck:
      test: "curl --silent --fail http://localhost:8761/actuator/health | grep '\"status\":\"UP\"' || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
  config:
    build: ./config
    volumes:
      - "./config/src/main/resources/config-repo:/app/config-repo"
    ports:
      - "8800:8800"
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      ACTIVE_PROFILE: dev
      SPRING_PAGE: 5
      SPRING_FLYWAY_ENABLED: 'true'
      API_PREFIX: '/api/v1'
      JWT_SECRET: 'aboba'
    healthcheck:
      test: "curl --silent --fail config:8800/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  gateway:
    build: ./gateway
    ports:
      - "8080:8080"
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800

  auth:
    build: ./auth
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: auth_db
      DB_PORT: 5432
      DB_USER: auth
      DB_PASSWORD: auth
  analysis:
    build:
      context: ./analysis
    volumes:
      - '${HOME}/.m2:/root/.m2'
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: analysis_db
      DB_PORT: 5432
      DB_USER: analysis
      DB_PASSWORD: analysis
  doctor:
    build: ./doctor
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: doctor_db
      DB_PORT: 5432
      DB_USER: doctor
      DB_PASSWORD: doctor
  document:
    build: ./document
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: document_db
      DB_PORT: 5432
      DB_USER: document
      DB_PASSWORD: document
  mail:
    build: ./mail
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
  appointment:
    build: ./appointment
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: appointment_db
      DB_PORT: 5432
      DB_USER: appointment
      DB_PASSWORD: appointment
  timetable:
    build: ./timetable
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
  patient:
    build: ./patient
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: patient_db
      DB_PORT: 5432
      DB_USER: patient
      DB_PASSWORD: patient
  billing:
    build: ./billing
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
  recipe:
    build: ./recipe
    depends_on:
      eureka:
        condition: service_healthy
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
      DB_HOST: postgres-db
      DB_NAME: recipe_db
      DB_PORT: 5432
      DB_USER: recipe
      DB_PASSWORD: recipe

#      нз нз подумай еще
  minio:
    image: minio/minio:latest
    container_name: minio
#    depends_on:
#      eureka:
#        condition: service_healthy
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadminsecret
      EUREKA_URL: http://eureka:8761/eureka/
      CONFIG_URL: http://config:8800
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_storage:/data

  minio-eureka-service:
    build: ./minio
    ports:
      - "8089:8089"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadminsecret
#      EUREKA_URL: http://eureka:8761/eureka/
#      CONFIG_URL: http://config:8800
#    depends_on:
#      eureka:
#        condition: service_healthy
    volumes:
      - ./minio_storage:/data


volumes:
  postgres_data: